{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\TheWeatherApp\\\\TheWeatherApp\\\\homework\\\\src\\\\containers\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Route } from 'react-router-dom'; // Agrega esta línea\nimport './App.css';\nimport Nav from '../components/Nav.jsx';\n// import Cards from '../components/Cards.jsx';\nimport About from '../components/About.jsx'; // Agrega esta línea\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = 'Aqui va la API key que creaste';\nfunction App() {\n  _s();\n  const [cities, setCities] = useState([]);\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n  function onSearch(ciudad) {\n    //Llamado a la API del clima\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Nav, {\n          onSearch: onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Route","Nav","About","jsxDEV","_jsxDEV","apiKey","App","_s","cities","setCities","onClose","id","oldCities","filter","c","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert","onFilter","ciudadId","parseInt","length","className","children","Routes","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/TheWeatherApp/TheWeatherApp/homework/src/containers/App.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { Route } from 'react-router-dom'; // Agrega esta línea\r\nimport './App.css';\r\nimport Nav from '../components/Nav.jsx';\r\n// import Cards from '../components/Cards.jsx';\r\nimport About from '../components/About.jsx'; // Agrega esta línea\r\n\r\nconst apiKey = 'Aqui va la API key que creaste';\r\n\r\nfunction App() {\r\n  const [cities, setCities] = useState([]);\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\r\n  }\r\n  function onSearch(ciudad) {\r\n    //Llamado a la API del clima\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if(recurso.main !== undefined){\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n  }\r\n  function onFilter(ciudadId) {\r\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\r\n    if(ciudad.length > 0) {\r\n        return ciudad[0];\r\n    } else {\r\n        return null;\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes>\r\n        <Route \r\n          path='/'\r\n          element={<Nav onSearch={onSearch}/>}\r\n        />\r\n        <Route \r\n          path='/about'\r\n          element={<About />}\r\n        />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}